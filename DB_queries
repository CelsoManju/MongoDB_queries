******Create commands****************
use zclass
db.createCollection("users");
db.createCollection("codekata");
db.createCollection("attendance");
db.createCollection("topics");
db.createCollection("tasks");
db.createCollection("company_drives");
db.createCollection("mentors");
db.createCollection("mentee_mentor_relationship");
=====================================================
******Insert commands***********
db.users.insertOne({
  "name": "User Name",
  "email": "user@email.com",
  "registration_date": new Date("2020-09-19")
});

db.codekata.insertOne({
  "user_id": ObjectId("6509344ee600007d8bf8e494"),
  "problems_solved": 20,
  "date_completed": new Date("2020-09-19")
});

db.attendance.insertOne({
  "user_id": ObjectId("6509344ee600007d8bf8e494"),
  "class_date": new Date("2020-09-19"),
  "status": "Present" 
});

db.topics.insertOne({
  "topic_name": "JS"
});

db.tasks.insertOne({
  "topic_id": ObjectId("6509349be600007d8bf8e497"),
  "task_name": "Task1",
  "task_description": "sample Task Description",
  "task_deadline": new Date("2020-09-30")
});

db.company_drives.insertOne({
  "drive_name": "Drive1",
  "drive_date": new Date("2020-10-15")
});

db.mentors.insertOne({
  "mentor_name": "Mentor N1"
});

db.mentee_mentor_relationship.insertOne({
  "mentor_id": ObjectId("6509356be600007d8bf8e49a"),
  "mentee_id": ObjectId("6509344ee600007d8bf8e494")
});
========================================================
*********Find and aggregate queries*****************
1)Find all the topics and tasks which are thought in the month of October
-------------------------------------------------------------------------------
db.tasks.find({
  "task_deadline": {
    $gte: ISODate("2020-10-01"),
    $lt: ISODate("2020-11-01")
  }
});
2)Find all the company drives which appeared between 15 oct-2020 and 31-oct-2020
--------------------------------------------------------------------------------
db.company_drives.find({
  "drive_date": {
    $gte: ISODate("2020-10-15"),
    $lte: ISODate("2020-10-31")
  }
});

3)Find all the company drives and students who are appeared for the placement.
-----------------------------------------------------------------------------
db.company_drives.aggregate([
  {
    $lookup: {
      from: "attendance",
      localField: "drive_date",
      foreignField: "class_date",
      as: "attendance_info"
    }
  },
  {
    $lookup: {
      from: "users",
      localField: "attendance_info.user_id",
      foreignField: "_id",
      as: "students"
    }
  },
  {
    $project: {
      "drive_name": 1,
      "students.name": 1
    }
  }
]);

4)Find the number of problems solved by the user in codekata
---------------------------------------------------------------
db.codekata.aggregate([
  {
    $group: {
      _id: "$user_id",
      total_problems_solved: { $sum: "$problems_solved" }
    }
  }
]);

5)Find all the mentors with who has the mentee's count more than 15
-------------------------------------------------------------------
db.mentors.aggregate([
  {
    $lookup: {
      from: "mentee_mentor_relationship",
      localField: "_id",
      foreignField: "mentor_id",
      as: "mentee_relationships"
    }
  },
  {
    $project: {
      "mentor_name": 1,
      "mentee_count": { $size: "$mentee_relationships" }
    }
  },
  {
    $match: {
      "mentee_count": { $gt: 15 }
    }
  }
]);
6)Find the number of users who are absent and task is not submitted  between 15 oct-2020 and 31-oct-2020
---------------------------------------------------------------------------------------------------------
db.attendance.aggregate([
  {
    $lookup: {
      from: "tasks",
      localField: "user_id",
      foreignField: "user_id",
      as: "tasks_info"
    }
  },
  {
    $match: {
      "class_date": {
        $gte: ISODate("2020-10-15"),
        $lte: ISODate("2020-10-31")
      },
      "status": "Absent",
      "tasks_info": { $eq: [] } 
    }
  },
  {
    $group: {
      _id: null,
      num_users: { $sum: 1 }
    }
  }
]);

